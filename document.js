const fs = require('fs');
const glob = require('glob');
const {resolve} = require('path');
const {Remarkable} = require('remarkable');

// noinspection JSCheckFunctionSignatures
const md = new Remarkable({});

fs.writeFileSync('README.md', `<!-- AUTOMATICALLY GENERATED BY RUNNING: npm run document -->
${fs.readFileSync('DOC.md', 'utf8')
    .replace(/{{polyfills}}/, [
        ['stable', 'natively supported above IE10'],
        ['featured', 'natively unsupported under IE'],
    ].map(([category, desc]) => `<details>
    <summary><b>${category}</b> <i>(${desc})</i></summary>
    <ul>
${polyfills(category)}
    </ul>
</details>`).join('\n'))}`, 'utf8');

function polyfills(category) {
    // Based on the directory
    const path = `./lib/${category}`;
    return fs.readdirSync(resolve(path))
        .filter(name => fs.lstatSync(resolve(path, name)).isDirectory())
        .map(name => `        <li>${detail(name)}</li>`)
        .join('\n');

    function detail(name) {
        // Based on the comments
        const notes = glob.sync('**/*.js', {cwd : resolve(path, name)}).map(file => {
            // Based on the URL (https://developer.mozilla.org/en-US/docs/Web/API/*)
            const reg = /NOTE:\s*(.*)/g, notes = [];
            let result;
            while ((result = reg.exec(fs.readFileSync(resolve(path, name, file), 'utf8')))) {
                notes.push(md.render(result[1]).replace(/<\/?p>/g, ''));
            }

            return notes;
        }).flat();

        let indexUrl;
        const specifications = glob.sync('**/*.js', {cwd : resolve(path, name)}).map(file => {
            // Based on the URL (https://developer.mozilla.org/en-US/docs/Web/API/*)
            const reg = /https:\/\/developer\.mozilla\.org\/en-US\/docs\/Web\/API\/([\w/]+)/g, items = [];
            let result;
            while ((result = reg.exec(fs.readFileSync(resolve(path, name, file), 'utf8')))) {
                const values = result[1].split('/'), value = values[values.length - 1];
                if (result[1] === name) { // Find the first which matched the folder's name
                    indexUrl = indexUrl || result[0];
                } else {
                    items.push(
                        `<a href="${result[0]}" target=_blank>${value === name ? 'constructor' : value}</a>`
                    );
                }
            }

            return items;
        }).flat();

        // name (xxx, xxx)
        // <a>name</a>
        // <ol><li><i>notes</i></li></ol>
        return (specifications[0] ? `${name} (${specifications.join(', ')})`
            : indexUrl ? `<a href="${indexUrl}" target=_blank>${name}</a>`
                : name)
               + (notes[0] ? `<ul>${Array.from(new Set(notes)).map(n => `<li><i>${n}</i></li>`).join('')}</ul>` : '');
    }
}
